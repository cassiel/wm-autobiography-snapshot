# -*- mode: org; mode: visual-line; -*-
#+STARTUP: indent
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [a4paper]
#+LATEX_HEADER: \usepackage{bookman,a4wide}
#+OPTIONS: toc:nil num:0

* Autobiography
*** Nick Rothwell, =nick@cassiel.com=

** Summary

The *Autobiography* software assembles 15 movement sequences from a pool of 23, one for each of the chromosome pairs in every human. Choreographic rules constrain the ordering of the sequences, but otherwise they are rendered according to a selection algorithm derived from the genotypes of Wayne McGregor's DNA.

** Online Service

The server providing the Autobiography algorithm is hosted on the cloud service Heroku. It is available at

#+BEGIN_SRC text
  https://autobiography-23.herokuapp.com/
#+END_SRC

\noindent (The database storage is implemented in MongoDB on =mLab=.)

** Detail

The Autobiography algorithm assembles ``sets'' of fifteen cues in a pseudo-random order determined by Wayne McGregor's DNA. For each set, the cues are drawn from a pool of 23 and arranged visually in a circle. Each of these numbered and coloured cues is a short choreographed movement section.

#+CAPTION: The main index view
#+NAME: fig:index
[[./img/index.jpg]]

In addition, for each set seven letters are pseudo-randomly selected and ordered from the first ten in the alphabet (=A= to =J=): these indicate the order of dancers' solos within one of the cues (number =13=).

*** Storage and Retrieval

Every set is identified by an index number. A number can be typed into the form in the middle of the screen; when the =Next= button is pressed, a set is returned with that index number. The next index up is placed into the form, so that by default sets with successive indices are generated by clicking =Next= repeatedly. At any stage, a new index value can be typed into the form to retrieve a specific index.

An index number uniquely identifies a set, indefinitely. If a completely new index number is used, a new set is generated and stored in a database with that index. If an existing index number is (re)used, the set identified with that index is retrieved from the database.

At present, there is no visual indication on this page to determine whether a newly-displayed set has been freshly generated, or retrieved. However, all stored sets can be viewed on the listings page at

#+BEGIN_SRC text
  https://autobiography-23.herokuapp.com/list
#+END_SRC

#+CAPTION: The set listings view
#+NAME: fig:list
[[./img/list.jpg]]

\noindent This page shows every set, in reverse order of date first rendered, together with index number, the main cue sequence, and the ``cue 13'' subsequence.

*** Shuffling and Arrangement

The bulk of the Autobiography algorithm is responsible for taking the 23 cues in the pool (numbered from =1= to =23=) and returning a list of 15 cues which conforms to some prescribed choreographic rules. Once this is done, the ``cue 13'' subsequence is generated as a conventional permutation of 7 letters selected randomly from 10.

The choreographic rules are applied as follows:

- Exclusion Shuffle :: 23 available cues are shuffled randomly and 15 chosen as an initial candidate list for the final result, according to an exclusion list:

  - cues =2= and =3= are mutually exclusive
  - cues =4= and =5= are mutually exclusive
  - cues =8= and =9= are mutually exclusive
  - cues =10= and =11= are mutually exclusive
  - cues =16= and =17= are mutually exclusive
  - cues =18=, =19= and =20= are mutually exclusive
  - cues =21= and =22= are mutually exclusive

- Position :: cue =1= is forced into the first visible position, by swapping it with whatever cue happens to occupy the first position
- Position :: cue =23= is forced into the last visible position, as above
- Position :: cue =12= is forced into the ``half-way'' position, as above
- Pairing :: if cue =4= is present in the result, swap in =8= by swapping out =9=
- Pairing :: if cue =5= is present in the result, swap in =9= by swapping out =8=
- Into Region :: cue =16= or =17= (whichever is present) is swapped into the first half of the result, but not immediately after cue =1=
- Into Region :: cue =6= is swapped into the second half of the result
- Into Region :: cue =14= is swapped into the second half of the result
- Well-Spacing :: the result is rearranged to guarantee space (at least one cue) between cues =2= / =3=, =6=, =13= and =15=

Each positioning action can theoretically undo the work of previous actions. Therefore, each positioning action ``wires'' its result(s) into place, so that no subsequent action can undo its effect. Because of this gradual locking down of the layout, the ``Well-Spacing'' action is very difficult to codify. Instead, it is implemented as a filter: cue combinations are continually generated with all the previous actions applied, and then tested for the ``Well-Spacing'' condition. If a combination fails, a new one is generated. In the current implementation, 10 iterations are attempted before the algorithm gives up (by not enforcing the ``Well-Spacing'' condition). In practice, the algorithm very rarely runs out of attempts---in other words, ``Well-Spacing'' is achieved in practically all cases.

*** Randomisation and DNA

In the description above, we have used terms like ``shuffle'' and ``random'' to indicate some random choice in the creation of each cue set. Early versions of the algorithm did indeed use a random number generator in all these choices, but the current system uses Wayne McGregor's DNA as a sequence generator to inform all ``random choices'' the algorithm has to make. For every ``random'' decision needed by the algorithm (which, for a shuffle operation, will be several), it steps along the chromosome genotypes in sequence, using the specific genotype to determine the ``random'' choice. (At present, we only make use of chromosome 1.) The step position is preserved in the client system (the web browser) so that repeated generation of cue sets advances through the genotypes. When the client environment (the web page) is first loaded, the genotype ``pointer'' is positioned randomly into the genotype list, to make sure that cue sets are not repeated due to a replay of the genotypes. (This is the only ``true'' random operation in the entire algorithm.)
